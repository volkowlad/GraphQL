// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"errors"
	"github.com/99designs/gqlgen/graphql"
	"github.com/google/uuid"
	"io"
	"strconv"
	"time"
)

type Comment struct {
	ID        uuid.UUID  `json:"id"`
	PostID    uuid.UUID  `json:"postId"`
	ParentID  *uuid.UUID `json:"parentId,omitempty"`
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"createdAt"`
	Replies   []*Comment `json:"replies"`
}

type Mutation struct {
}

type Post struct {
	ID            uuid.UUID  `json:"id"`
	Title         string     `json:"title"`
	Content       string     `json:"content"`
	AllowComments bool       `json:"allowComments"`
	CreatedAt     time.Time  `json:"createdAt"`
	Comments      []*Comment `json:"comments"`
}

type Query struct {
}

type Subscription struct {
}

func MarshalTimestamp(t time.Time) graphql.Marshaler {
	timestamp := t.Unix() * 1000

	return graphql.WriterFunc(func(w io.Writer) {
		io.WriteString(w, strconv.FormatInt(timestamp, 10))
	})
}

func UnmarshalTimestamp(v interface{}) (time.Time, error) {
	if tmpStr, ok := v.(int); ok {
		return time.Unix(int64(tmpStr), 0), nil
	}
	return time.Time{}, errors.New("fatid to unmarshal timestamp")
}